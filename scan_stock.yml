openapi: 3.0.3
info:
  title: Scan & Stock
  description: The API Specification specifies the RESTful API provided by the server side of Scan & Stock.
  version: 1.0.0
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    User:
      type: object
      required:
        - id
        - email
        - username
        - items
      properties:
        id:
          type: integer
          format: int64
          example: 1
        email:
          type: string
          format: email
          example: test@example.com
        username:
          type: string
          example: test_user
        items:
          type: array
          items:
            type: integer
            format: int64
          example: [1, 2, 3]
          uniqueItems: true
    Item:
      type: object
      required:
        - id
        - qrcode
        - barcode
        - tags
        - creator
      properties:
        id:
          type: integer
          format: int64
          example: 1
        qrcode:
          type: string
          format: binary
        barcode:
          type: string
          format: binary
        attrs:
          type: string
          example: {description: This is an item description.}
        tags:
          type: array
          items:
            type: string
          example: [tag1, tag2, tag3]
        creatorId:
          type: integer
          format: int64
          example: 1
    ItemTemplate:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: item_template_1
        description:
          type: string
          example: This is an item template description.
        attrs:
          type: string
          example: {amount: 1}
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
security:
  - BasicAuth: []
paths:
  /user:
    post:
      summary: Create a user
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - username
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: test@example.com
                username:
                  type: string
                  example: test_user
                password:
                  type: string
                  format: password
                  example: password
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/{userId}:
    get:
      summary: Get a user by id
      parameters:
        - name: userId
          in: path
          description: The id of the user
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Access denied
  /user/{userId}/items:
    get:
      summary: Get all items created by the specified user
      parameters:
        - name: userId
          in: path
          description: The id of the user
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Access denied
  /user/login:
    get:
      summary: Log in the user
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /item:
    post:
      summary: Create an item
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                attrs:
                  type: string
                  example: {description: This is an item description.}
                tags:
                  type: array
                  items:
                    type: string
                  example: [tag1, tag2, tag3]
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /item/{itemId}:
    get:
      summary: Get an item by id
      parameters:
        - name: itemId
          in: path
          description: The id of the item
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Access denied
        '404':
          description: Item not found
    put:
      summary: Update an item
      parameters:
        - name: itemId
          in: path
          description: The id of the item
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                attrs:
                  type: string
                  example: {description: This is an item description.}
                tags:
                  type: array
                  items:
                    type: string
                  example: [tag1, tag2, tag3]
      responses:
        '200':
          description: Successful operation
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Access denied
        '404':
          description: Item not found
  /item_template:
    get:
      summary: Get all item templates.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemTemplate'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /item_template/{templateId}:
    get:
      summary: Get an item template by id
      parameters:
        - name: templateId
          in: path
          description: The id of the item template
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ItemTemplate'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Template not found
  /search:
    get:
      parameters:
        - in: query
          name: keywords
          required: true
          schema:
            type: string
            example: keyword1 keyword2
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

